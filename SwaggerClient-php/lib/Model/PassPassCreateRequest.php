<?php
/**
 * PassPassCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PassPassCreateRequest Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PassPassCreateRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'passPassCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'car_model' => 'string',
        'car_number' => 'string',
        'driver_name' => 'string',
        'driver_patronymic' => 'string',
        'driver_surname' => 'string',
        'end_unloading_time' => 'string',
        'is_regular_pass' => 'bool',
        'start_unloading_time' => 'string',
        'telephone' => 'string',
        'trailer_number' => 'string',
        'unload_date' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'car_model' => 'car_model',
        'car_number' => 'car_number',
        'driver_name' => 'driver_name',
        'driver_patronymic' => 'driver_patronymic',
        'driver_surname' => 'driver_surname',
        'end_unloading_time' => 'end_unloading_time',
        'is_regular_pass' => 'is_regular_pass',
        'start_unloading_time' => 'start_unloading_time',
        'telephone' => 'telephone',
        'trailer_number' => 'trailer_number',
        'unload_date' => 'unload_date'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'car_model' => 'setCarModel',
        'car_number' => 'setCarNumber',
        'driver_name' => 'setDriverName',
        'driver_patronymic' => 'setDriverPatronymic',
        'driver_surname' => 'setDriverSurname',
        'end_unloading_time' => 'setEndUnloadingTime',
        'is_regular_pass' => 'setIsRegularPass',
        'start_unloading_time' => 'setStartUnloadingTime',
        'telephone' => 'setTelephone',
        'trailer_number' => 'setTrailerNumber',
        'unload_date' => 'setUnloadDate'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'car_model' => 'getCarModel',
        'car_number' => 'getCarNumber',
        'driver_name' => 'getDriverName',
        'driver_patronymic' => 'getDriverPatronymic',
        'driver_surname' => 'getDriverSurname',
        'end_unloading_time' => 'getEndUnloadingTime',
        'is_regular_pass' => 'getIsRegularPass',
        'start_unloading_time' => 'getStartUnloadingTime',
        'telephone' => 'getTelephone',
        'trailer_number' => 'getTrailerNumber',
        'unload_date' => 'getUnloadDate'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['car_model'] = isset($data['car_model']) ? $data['car_model'] : null;
        $this->container['car_number'] = isset($data['car_number']) ? $data['car_number'] : null;
        $this->container['driver_name'] = isset($data['driver_name']) ? $data['driver_name'] : null;
        $this->container['driver_patronymic'] = isset($data['driver_patronymic']) ? $data['driver_patronymic'] : null;
        $this->container['driver_surname'] = isset($data['driver_surname']) ? $data['driver_surname'] : null;
        $this->container['end_unloading_time'] = isset($data['end_unloading_time']) ? $data['end_unloading_time'] : null;
        $this->container['is_regular_pass'] = isset($data['is_regular_pass']) ? $data['is_regular_pass'] : null;
        $this->container['start_unloading_time'] = isset($data['start_unloading_time']) ? $data['start_unloading_time'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['trailer_number'] = isset($data['trailer_number']) ? $data['trailer_number'] : null;
        $this->container['unload_date'] = isset($data['unload_date']) ? $data['unload_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets car_model
     * @return string
     */
    public function getCarModel()
    {
        return $this->container['car_model'];
    }

    /**
     * Sets car_model
     * @param string $car_model
     * @return $this
     */
    public function setCarModel($car_model)
    {
        $this->container['car_model'] = $car_model;

        return $this;
    }

    /**
     * Gets car_number
     * @return string
     */
    public function getCarNumber()
    {
        return $this->container['car_number'];
    }

    /**
     * Sets car_number
     * @param string $car_number
     * @return $this
     */
    public function setCarNumber($car_number)
    {
        $this->container['car_number'] = $car_number;

        return $this;
    }

    /**
     * Gets driver_name
     * @return string
     */
    public function getDriverName()
    {
        return $this->container['driver_name'];
    }

    /**
     * Sets driver_name
     * @param string $driver_name
     * @return $this
     */
    public function setDriverName($driver_name)
    {
        $this->container['driver_name'] = $driver_name;

        return $this;
    }

    /**
     * Gets driver_patronymic
     * @return string
     */
    public function getDriverPatronymic()
    {
        return $this->container['driver_patronymic'];
    }

    /**
     * Sets driver_patronymic
     * @param string $driver_patronymic
     * @return $this
     */
    public function setDriverPatronymic($driver_patronymic)
    {
        $this->container['driver_patronymic'] = $driver_patronymic;

        return $this;
    }

    /**
     * Gets driver_surname
     * @return string
     */
    public function getDriverSurname()
    {
        return $this->container['driver_surname'];
    }

    /**
     * Sets driver_surname
     * @param string $driver_surname
     * @return $this
     */
    public function setDriverSurname($driver_surname)
    {
        $this->container['driver_surname'] = $driver_surname;

        return $this;
    }

    /**
     * Gets end_unloading_time
     * @return string
     */
    public function getEndUnloadingTime()
    {
        return $this->container['end_unloading_time'];
    }

    /**
     * Sets end_unloading_time
     * @param string $end_unloading_time
     * @return $this
     */
    public function setEndUnloadingTime($end_unloading_time)
    {
        $this->container['end_unloading_time'] = $end_unloading_time;

        return $this;
    }

    /**
     * Gets is_regular_pass
     * @return bool
     */
    public function getIsRegularPass()
    {
        return $this->container['is_regular_pass'];
    }

    /**
     * Sets is_regular_pass
     * @param bool $is_regular_pass
     * @return $this
     */
    public function setIsRegularPass($is_regular_pass)
    {
        $this->container['is_regular_pass'] = $is_regular_pass;

        return $this;
    }

    /**
     * Gets start_unloading_time
     * @return string
     */
    public function getStartUnloadingTime()
    {
        return $this->container['start_unloading_time'];
    }

    /**
     * Sets start_unloading_time
     * @param string $start_unloading_time
     * @return $this
     */
    public function setStartUnloadingTime($start_unloading_time)
    {
        $this->container['start_unloading_time'] = $start_unloading_time;

        return $this;
    }

    /**
     * Gets telephone
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     * @param string $telephone
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets trailer_number
     * @return string
     */
    public function getTrailerNumber()
    {
        return $this->container['trailer_number'];
    }

    /**
     * Sets trailer_number
     * @param string $trailer_number
     * @return $this
     */
    public function setTrailerNumber($trailer_number)
    {
        $this->container['trailer_number'] = $trailer_number;

        return $this;
    }

    /**
     * Gets unload_date
     * @return string
     */
    public function getUnloadDate()
    {
        return $this->container['unload_date'];
    }

    /**
     * Sets unload_date
     * @param string $unload_date
     * @return $this
     */
    public function setUnloadDate($unload_date)
    {
        $this->container['unload_date'] = $unload_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


