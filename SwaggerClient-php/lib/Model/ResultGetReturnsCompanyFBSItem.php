<?php
/**
 * ResultGetReturnsCompanyFBSItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ResultGetReturnsCompanyFBSItem Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ResultGetReturnsCompanyFBSItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ResultGetReturnsCompanyFBSItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'accepted_from_customer_moment' => 'string',
        'clearing_id' => 'int',
        'commission' => 'double',
        'commission_percent' => 'double',
        'id' => 'int',
        'is_moving' => 'bool',
        'is_opened' => 'bool',
        'last_free_waiting_day' => 'string',
        'moving_to_place_name' => 'string',
        'picking_amount' => 'double',
        'place_id' => 'int',
        'posting_number' => 'string',
        'price' => 'double',
        'price_without_commission' => 'double',
        'product_id' => 'int',
        'product_name' => 'string',
        'quantity' => 'int',
        'return_date' => 'string',
        'return_reason_name' => 'string',
        'returned_to_seller_date_time' => 'string',
        'returns_keeping_cost' => 'double',
        'sku' => 'int',
        'status' => 'string',
        'waiting_for_seller_date_time' => 'string',
        'waiting_for_seller_days' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'accepted_from_customer_moment' => 'accepted_from_customer_moment',
        'clearing_id' => 'clearing_id',
        'commission' => 'commission',
        'commission_percent' => 'commission_percent',
        'id' => 'id',
        'is_moving' => 'is_moving',
        'is_opened' => 'is_opened',
        'last_free_waiting_day' => 'last_free_waiting_day',
        'moving_to_place_name' => 'moving_to_place_name',
        'picking_amount' => 'picking_amount',
        'place_id' => 'place_id',
        'posting_number' => 'posting_number',
        'price' => 'price',
        'price_without_commission' => 'price_without_commission',
        'product_id' => 'product_id',
        'product_name' => 'product_name',
        'quantity' => 'quantity',
        'return_date' => 'return_date',
        'return_reason_name' => 'return_reason_name',
        'returned_to_seller_date_time' => 'returned_to_seller_date_time',
        'returns_keeping_cost' => 'returns_keeping_cost',
        'sku' => 'sku',
        'status' => 'status',
        'waiting_for_seller_date_time' => 'waiting_for_seller_date_time',
        'waiting_for_seller_days' => 'waiting_for_seller_days'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'accepted_from_customer_moment' => 'setAcceptedFromCustomerMoment',
        'clearing_id' => 'setClearingId',
        'commission' => 'setCommission',
        'commission_percent' => 'setCommissionPercent',
        'id' => 'setId',
        'is_moving' => 'setIsMoving',
        'is_opened' => 'setIsOpened',
        'last_free_waiting_day' => 'setLastFreeWaitingDay',
        'moving_to_place_name' => 'setMovingToPlaceName',
        'picking_amount' => 'setPickingAmount',
        'place_id' => 'setPlaceId',
        'posting_number' => 'setPostingNumber',
        'price' => 'setPrice',
        'price_without_commission' => 'setPriceWithoutCommission',
        'product_id' => 'setProductId',
        'product_name' => 'setProductName',
        'quantity' => 'setQuantity',
        'return_date' => 'setReturnDate',
        'return_reason_name' => 'setReturnReasonName',
        'returned_to_seller_date_time' => 'setReturnedToSellerDateTime',
        'returns_keeping_cost' => 'setReturnsKeepingCost',
        'sku' => 'setSku',
        'status' => 'setStatus',
        'waiting_for_seller_date_time' => 'setWaitingForSellerDateTime',
        'waiting_for_seller_days' => 'setWaitingForSellerDays'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'accepted_from_customer_moment' => 'getAcceptedFromCustomerMoment',
        'clearing_id' => 'getClearingId',
        'commission' => 'getCommission',
        'commission_percent' => 'getCommissionPercent',
        'id' => 'getId',
        'is_moving' => 'getIsMoving',
        'is_opened' => 'getIsOpened',
        'last_free_waiting_day' => 'getLastFreeWaitingDay',
        'moving_to_place_name' => 'getMovingToPlaceName',
        'picking_amount' => 'getPickingAmount',
        'place_id' => 'getPlaceId',
        'posting_number' => 'getPostingNumber',
        'price' => 'getPrice',
        'price_without_commission' => 'getPriceWithoutCommission',
        'product_id' => 'getProductId',
        'product_name' => 'getProductName',
        'quantity' => 'getQuantity',
        'return_date' => 'getReturnDate',
        'return_reason_name' => 'getReturnReasonName',
        'returned_to_seller_date_time' => 'getReturnedToSellerDateTime',
        'returns_keeping_cost' => 'getReturnsKeepingCost',
        'sku' => 'getSku',
        'status' => 'getStatus',
        'waiting_for_seller_date_time' => 'getWaitingForSellerDateTime',
        'waiting_for_seller_days' => 'getWaitingForSellerDays'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepted_from_customer_moment'] = isset($data['accepted_from_customer_moment']) ? $data['accepted_from_customer_moment'] : null;
        $this->container['clearing_id'] = isset($data['clearing_id']) ? $data['clearing_id'] : null;
        $this->container['commission'] = isset($data['commission']) ? $data['commission'] : null;
        $this->container['commission_percent'] = isset($data['commission_percent']) ? $data['commission_percent'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_moving'] = isset($data['is_moving']) ? $data['is_moving'] : null;
        $this->container['is_opened'] = isset($data['is_opened']) ? $data['is_opened'] : null;
        $this->container['last_free_waiting_day'] = isset($data['last_free_waiting_day']) ? $data['last_free_waiting_day'] : null;
        $this->container['moving_to_place_name'] = isset($data['moving_to_place_name']) ? $data['moving_to_place_name'] : null;
        $this->container['picking_amount'] = isset($data['picking_amount']) ? $data['picking_amount'] : null;
        $this->container['place_id'] = isset($data['place_id']) ? $data['place_id'] : null;
        $this->container['posting_number'] = isset($data['posting_number']) ? $data['posting_number'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['price_without_commission'] = isset($data['price_without_commission']) ? $data['price_without_commission'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['return_date'] = isset($data['return_date']) ? $data['return_date'] : null;
        $this->container['return_reason_name'] = isset($data['return_reason_name']) ? $data['return_reason_name'] : null;
        $this->container['returned_to_seller_date_time'] = isset($data['returned_to_seller_date_time']) ? $data['returned_to_seller_date_time'] : null;
        $this->container['returns_keeping_cost'] = isset($data['returns_keeping_cost']) ? $data['returns_keeping_cost'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['waiting_for_seller_date_time'] = isset($data['waiting_for_seller_date_time']) ? $data['waiting_for_seller_date_time'] : null;
        $this->container['waiting_for_seller_days'] = isset($data['waiting_for_seller_days']) ? $data['waiting_for_seller_days'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets accepted_from_customer_moment
     * @return string
     */
    public function getAcceptedFromCustomerMoment()
    {
        return $this->container['accepted_from_customer_moment'];
    }

    /**
     * Sets accepted_from_customer_moment
     * @param string $accepted_from_customer_moment
     * @return $this
     */
    public function setAcceptedFromCustomerMoment($accepted_from_customer_moment)
    {
        $this->container['accepted_from_customer_moment'] = $accepted_from_customer_moment;

        return $this;
    }

    /**
     * Gets clearing_id
     * @return int
     */
    public function getClearingId()
    {
        return $this->container['clearing_id'];
    }

    /**
     * Sets clearing_id
     * @param int $clearing_id
     * @return $this
     */
    public function setClearingId($clearing_id)
    {
        $this->container['clearing_id'] = $clearing_id;

        return $this;
    }

    /**
     * Gets commission
     * @return double
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     * @param double $commission
     * @return $this
     */
    public function setCommission($commission)
    {
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets commission_percent
     * @return double
     */
    public function getCommissionPercent()
    {
        return $this->container['commission_percent'];
    }

    /**
     * Sets commission_percent
     * @param double $commission_percent
     * @return $this
     */
    public function setCommissionPercent($commission_percent)
    {
        $this->container['commission_percent'] = $commission_percent;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_moving
     * @return bool
     */
    public function getIsMoving()
    {
        return $this->container['is_moving'];
    }

    /**
     * Sets is_moving
     * @param bool $is_moving
     * @return $this
     */
    public function setIsMoving($is_moving)
    {
        $this->container['is_moving'] = $is_moving;

        return $this;
    }

    /**
     * Gets is_opened
     * @return bool
     */
    public function getIsOpened()
    {
        return $this->container['is_opened'];
    }

    /**
     * Sets is_opened
     * @param bool $is_opened
     * @return $this
     */
    public function setIsOpened($is_opened)
    {
        $this->container['is_opened'] = $is_opened;

        return $this;
    }

    /**
     * Gets last_free_waiting_day
     * @return string
     */
    public function getLastFreeWaitingDay()
    {
        return $this->container['last_free_waiting_day'];
    }

    /**
     * Sets last_free_waiting_day
     * @param string $last_free_waiting_day
     * @return $this
     */
    public function setLastFreeWaitingDay($last_free_waiting_day)
    {
        $this->container['last_free_waiting_day'] = $last_free_waiting_day;

        return $this;
    }

    /**
     * Gets moving_to_place_name
     * @return string
     */
    public function getMovingToPlaceName()
    {
        return $this->container['moving_to_place_name'];
    }

    /**
     * Sets moving_to_place_name
     * @param string $moving_to_place_name
     * @return $this
     */
    public function setMovingToPlaceName($moving_to_place_name)
    {
        $this->container['moving_to_place_name'] = $moving_to_place_name;

        return $this;
    }

    /**
     * Gets picking_amount
     * @return double
     */
    public function getPickingAmount()
    {
        return $this->container['picking_amount'];
    }

    /**
     * Sets picking_amount
     * @param double $picking_amount
     * @return $this
     */
    public function setPickingAmount($picking_amount)
    {
        $this->container['picking_amount'] = $picking_amount;

        return $this;
    }

    /**
     * Gets place_id
     * @return int
     */
    public function getPlaceId()
    {
        return $this->container['place_id'];
    }

    /**
     * Sets place_id
     * @param int $place_id
     * @return $this
     */
    public function setPlaceId($place_id)
    {
        $this->container['place_id'] = $place_id;

        return $this;
    }

    /**
     * Gets posting_number
     * @return string
     */
    public function getPostingNumber()
    {
        return $this->container['posting_number'];
    }

    /**
     * Sets posting_number
     * @param string $posting_number
     * @return $this
     */
    public function setPostingNumber($posting_number)
    {
        $this->container['posting_number'] = $posting_number;

        return $this;
    }

    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param double $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_without_commission
     * @return double
     */
    public function getPriceWithoutCommission()
    {
        return $this->container['price_without_commission'];
    }

    /**
     * Sets price_without_commission
     * @param double $price_without_commission
     * @return $this
     */
    public function setPriceWithoutCommission($price_without_commission)
    {
        $this->container['price_without_commission'] = $price_without_commission;

        return $this;
    }

    /**
     * Gets product_id
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     * @param int $product_id
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_name
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     * @param string $product_name
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets return_date
     * @return string
     */
    public function getReturnDate()
    {
        return $this->container['return_date'];
    }

    /**
     * Sets return_date
     * @param string $return_date
     * @return $this
     */
    public function setReturnDate($return_date)
    {
        $this->container['return_date'] = $return_date;

        return $this;
    }

    /**
     * Gets return_reason_name
     * @return string
     */
    public function getReturnReasonName()
    {
        return $this->container['return_reason_name'];
    }

    /**
     * Sets return_reason_name
     * @param string $return_reason_name
     * @return $this
     */
    public function setReturnReasonName($return_reason_name)
    {
        $this->container['return_reason_name'] = $return_reason_name;

        return $this;
    }

    /**
     * Gets returned_to_seller_date_time
     * @return string
     */
    public function getReturnedToSellerDateTime()
    {
        return $this->container['returned_to_seller_date_time'];
    }

    /**
     * Sets returned_to_seller_date_time
     * @param string $returned_to_seller_date_time
     * @return $this
     */
    public function setReturnedToSellerDateTime($returned_to_seller_date_time)
    {
        $this->container['returned_to_seller_date_time'] = $returned_to_seller_date_time;

        return $this;
    }

    /**
     * Gets returns_keeping_cost
     * @return double
     */
    public function getReturnsKeepingCost()
    {
        return $this->container['returns_keeping_cost'];
    }

    /**
     * Sets returns_keeping_cost
     * @param double $returns_keeping_cost
     * @return $this
     */
    public function setReturnsKeepingCost($returns_keeping_cost)
    {
        $this->container['returns_keeping_cost'] = $returns_keeping_cost;

        return $this;
    }

    /**
     * Gets sku
     * @return int
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param int $sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets waiting_for_seller_date_time
     * @return string
     */
    public function getWaitingForSellerDateTime()
    {
        return $this->container['waiting_for_seller_date_time'];
    }

    /**
     * Sets waiting_for_seller_date_time
     * @param string $waiting_for_seller_date_time
     * @return $this
     */
    public function setWaitingForSellerDateTime($waiting_for_seller_date_time)
    {
        $this->container['waiting_for_seller_date_time'] = $waiting_for_seller_date_time;

        return $this;
    }

    /**
     * Gets waiting_for_seller_days
     * @return int
     */
    public function getWaitingForSellerDays()
    {
        return $this->container['waiting_for_seller_days'];
    }

    /**
     * Sets waiting_for_seller_days
     * @param int $waiting_for_seller_days
     * @return $this
     */
    public function setWaitingForSellerDays($waiting_for_seller_days)
    {
        $this->container['waiting_for_seller_days'] = $waiting_for_seller_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


