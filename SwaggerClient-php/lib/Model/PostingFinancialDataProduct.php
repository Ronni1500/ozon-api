<?php
/**
 * PostingFinancialDataProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PostingFinancialDataProduct Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostingFinancialDataProduct implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PostingFinancialDataProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'actions' => 'string[]',
        'client_price' => 'string',
        'commission_amount' => 'double',
        'commission_percent' => 'int',
        'old_price' => 'double',
        'payout' => 'double',
        'picking' => '\Swagger\Client\Model\ProductPicking',
        'price' => 'double',
        'product_id' => 'int',
        'quantity' => 'int',
        'total_discount_percent' => 'double',
        'total_discount_value' => 'double'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'actions' => 'actions',
        'client_price' => 'client_price',
        'commission_amount' => 'commission_amount',
        'commission_percent' => 'commission_percent',
        'old_price' => 'old_price',
        'payout' => 'payout',
        'picking' => 'picking',
        'price' => 'price',
        'product_id' => 'product_id',
        'quantity' => 'quantity',
        'total_discount_percent' => 'total_discount_percent',
        'total_discount_value' => 'total_discount_value'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'actions' => 'setActions',
        'client_price' => 'setClientPrice',
        'commission_amount' => 'setCommissionAmount',
        'commission_percent' => 'setCommissionPercent',
        'old_price' => 'setOldPrice',
        'payout' => 'setPayout',
        'picking' => 'setPicking',
        'price' => 'setPrice',
        'product_id' => 'setProductId',
        'quantity' => 'setQuantity',
        'total_discount_percent' => 'setTotalDiscountPercent',
        'total_discount_value' => 'setTotalDiscountValue'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'actions' => 'getActions',
        'client_price' => 'getClientPrice',
        'commission_amount' => 'getCommissionAmount',
        'commission_percent' => 'getCommissionPercent',
        'old_price' => 'getOldPrice',
        'payout' => 'getPayout',
        'picking' => 'getPicking',
        'price' => 'getPrice',
        'product_id' => 'getProductId',
        'quantity' => 'getQuantity',
        'total_discount_percent' => 'getTotalDiscountPercent',
        'total_discount_value' => 'getTotalDiscountValue'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['client_price'] = isset($data['client_price']) ? $data['client_price'] : null;
        $this->container['commission_amount'] = isset($data['commission_amount']) ? $data['commission_amount'] : null;
        $this->container['commission_percent'] = isset($data['commission_percent']) ? $data['commission_percent'] : null;
        $this->container['old_price'] = isset($data['old_price']) ? $data['old_price'] : null;
        $this->container['payout'] = isset($data['payout']) ? $data['payout'] : null;
        $this->container['picking'] = isset($data['picking']) ? $data['picking'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['total_discount_percent'] = isset($data['total_discount_percent']) ? $data['total_discount_percent'] : null;
        $this->container['total_discount_value'] = isset($data['total_discount_value']) ? $data['total_discount_value'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets actions
     * @return string[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     * @param string[] $actions
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets client_price
     * @return string
     */
    public function getClientPrice()
    {
        return $this->container['client_price'];
    }

    /**
     * Sets client_price
     * @param string $client_price
     * @return $this
     */
    public function setClientPrice($client_price)
    {
        $this->container['client_price'] = $client_price;

        return $this;
    }

    /**
     * Gets commission_amount
     * @return double
     */
    public function getCommissionAmount()
    {
        return $this->container['commission_amount'];
    }

    /**
     * Sets commission_amount
     * @param double $commission_amount
     * @return $this
     */
    public function setCommissionAmount($commission_amount)
    {
        $this->container['commission_amount'] = $commission_amount;

        return $this;
    }

    /**
     * Gets commission_percent
     * @return int
     */
    public function getCommissionPercent()
    {
        return $this->container['commission_percent'];
    }

    /**
     * Sets commission_percent
     * @param int $commission_percent
     * @return $this
     */
    public function setCommissionPercent($commission_percent)
    {
        $this->container['commission_percent'] = $commission_percent;

        return $this;
    }

    /**
     * Gets old_price
     * @return double
     */
    public function getOldPrice()
    {
        return $this->container['old_price'];
    }

    /**
     * Sets old_price
     * @param double $old_price
     * @return $this
     */
    public function setOldPrice($old_price)
    {
        $this->container['old_price'] = $old_price;

        return $this;
    }

    /**
     * Gets payout
     * @return double
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     * @param double $payout
     * @return $this
     */
    public function setPayout($payout)
    {
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets picking
     * @return \Swagger\Client\Model\ProductPicking
     */
    public function getPicking()
    {
        return $this->container['picking'];
    }

    /**
     * Sets picking
     * @param \Swagger\Client\Model\ProductPicking $picking
     * @return $this
     */
    public function setPicking($picking)
    {
        $this->container['picking'] = $picking;

        return $this;
    }

    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param double $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets product_id
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     * @param int $product_id
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets total_discount_percent
     * @return double
     */
    public function getTotalDiscountPercent()
    {
        return $this->container['total_discount_percent'];
    }

    /**
     * Sets total_discount_percent
     * @param double $total_discount_percent
     * @return $this
     */
    public function setTotalDiscountPercent($total_discount_percent)
    {
        $this->container['total_discount_percent'] = $total_discount_percent;

        return $this;
    }

    /**
     * Gets total_discount_value
     * @return double
     */
    public function getTotalDiscountValue()
    {
        return $this->container['total_discount_value'];
    }

    /**
     * Sets total_discount_value
     * @param double $total_discount_value
     * @return $this
     */
    public function setTotalDiscountValue($total_discount_value)
    {
        $this->container['total_discount_value'] = $total_discount_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


