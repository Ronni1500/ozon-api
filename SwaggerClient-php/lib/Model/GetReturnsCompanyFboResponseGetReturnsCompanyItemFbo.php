<?php
/**
 * GetReturnsCompanyFboResponseGetReturnsCompanyItemFbo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetReturnsCompanyFboResponseGetReturnsCompanyItemFbo Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetReturnsCompanyFboResponseGetReturnsCompanyItemFbo implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetReturnsCompanyFboResponseGetReturnsCompanyItemFbo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'accepted_from_customer_moment' => '\DateTime',
        'company_id' => 'int',
        'current_place_name' => 'string',
        'dst_place_name' => 'string',
        'id' => 'int',
        'is_opened' => 'bool',
        'posting_number' => 'string',
        'return_reason_name' => 'string',
        'returned_to_ozon_moment' => '\DateTime',
        'sku' => 'int',
        'status_name' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'accepted_from_customer_moment' => 'accepted_from_customer_moment',
        'company_id' => 'company_id',
        'current_place_name' => 'current_place_name',
        'dst_place_name' => 'dst_place_name',
        'id' => 'id',
        'is_opened' => 'is_opened',
        'posting_number' => 'posting_number',
        'return_reason_name' => 'return_reason_name',
        'returned_to_ozon_moment' => 'returned_to_ozon_moment',
        'sku' => 'sku',
        'status_name' => 'status_name'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'accepted_from_customer_moment' => 'setAcceptedFromCustomerMoment',
        'company_id' => 'setCompanyId',
        'current_place_name' => 'setCurrentPlaceName',
        'dst_place_name' => 'setDstPlaceName',
        'id' => 'setId',
        'is_opened' => 'setIsOpened',
        'posting_number' => 'setPostingNumber',
        'return_reason_name' => 'setReturnReasonName',
        'returned_to_ozon_moment' => 'setReturnedToOzonMoment',
        'sku' => 'setSku',
        'status_name' => 'setStatusName'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'accepted_from_customer_moment' => 'getAcceptedFromCustomerMoment',
        'company_id' => 'getCompanyId',
        'current_place_name' => 'getCurrentPlaceName',
        'dst_place_name' => 'getDstPlaceName',
        'id' => 'getId',
        'is_opened' => 'getIsOpened',
        'posting_number' => 'getPostingNumber',
        'return_reason_name' => 'getReturnReasonName',
        'returned_to_ozon_moment' => 'getReturnedToOzonMoment',
        'sku' => 'getSku',
        'status_name' => 'getStatusName'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepted_from_customer_moment'] = isset($data['accepted_from_customer_moment']) ? $data['accepted_from_customer_moment'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['current_place_name'] = isset($data['current_place_name']) ? $data['current_place_name'] : null;
        $this->container['dst_place_name'] = isset($data['dst_place_name']) ? $data['dst_place_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_opened'] = isset($data['is_opened']) ? $data['is_opened'] : null;
        $this->container['posting_number'] = isset($data['posting_number']) ? $data['posting_number'] : null;
        $this->container['return_reason_name'] = isset($data['return_reason_name']) ? $data['return_reason_name'] : null;
        $this->container['returned_to_ozon_moment'] = isset($data['returned_to_ozon_moment']) ? $data['returned_to_ozon_moment'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['status_name'] = isset($data['status_name']) ? $data['status_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets accepted_from_customer_moment
     * @return \DateTime
     */
    public function getAcceptedFromCustomerMoment()
    {
        return $this->container['accepted_from_customer_moment'];
    }

    /**
     * Sets accepted_from_customer_moment
     * @param \DateTime $accepted_from_customer_moment
     * @return $this
     */
    public function setAcceptedFromCustomerMoment($accepted_from_customer_moment)
    {
        $this->container['accepted_from_customer_moment'] = $accepted_from_customer_moment;

        return $this;
    }

    /**
     * Gets company_id
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     * @param int $company_id
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets current_place_name
     * @return string
     */
    public function getCurrentPlaceName()
    {
        return $this->container['current_place_name'];
    }

    /**
     * Sets current_place_name
     * @param string $current_place_name
     * @return $this
     */
    public function setCurrentPlaceName($current_place_name)
    {
        $this->container['current_place_name'] = $current_place_name;

        return $this;
    }

    /**
     * Gets dst_place_name
     * @return string
     */
    public function getDstPlaceName()
    {
        return $this->container['dst_place_name'];
    }

    /**
     * Sets dst_place_name
     * @param string $dst_place_name
     * @return $this
     */
    public function setDstPlaceName($dst_place_name)
    {
        $this->container['dst_place_name'] = $dst_place_name;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_opened
     * @return bool
     */
    public function getIsOpened()
    {
        return $this->container['is_opened'];
    }

    /**
     * Sets is_opened
     * @param bool $is_opened
     * @return $this
     */
    public function setIsOpened($is_opened)
    {
        $this->container['is_opened'] = $is_opened;

        return $this;
    }

    /**
     * Gets posting_number
     * @return string
     */
    public function getPostingNumber()
    {
        return $this->container['posting_number'];
    }

    /**
     * Sets posting_number
     * @param string $posting_number
     * @return $this
     */
    public function setPostingNumber($posting_number)
    {
        $this->container['posting_number'] = $posting_number;

        return $this;
    }

    /**
     * Gets return_reason_name
     * @return string
     */
    public function getReturnReasonName()
    {
        return $this->container['return_reason_name'];
    }

    /**
     * Sets return_reason_name
     * @param string $return_reason_name
     * @return $this
     */
    public function setReturnReasonName($return_reason_name)
    {
        $this->container['return_reason_name'] = $return_reason_name;

        return $this;
    }

    /**
     * Gets returned_to_ozon_moment
     * @return \DateTime
     */
    public function getReturnedToOzonMoment()
    {
        return $this->container['returned_to_ozon_moment'];
    }

    /**
     * Sets returned_to_ozon_moment
     * @param \DateTime $returned_to_ozon_moment
     * @return $this
     */
    public function setReturnedToOzonMoment($returned_to_ozon_moment)
    {
        $this->container['returned_to_ozon_moment'] = $returned_to_ozon_moment;

        return $this;
    }

    /**
     * Gets sku
     * @return int
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param int $sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets status_name
     * @return string
     */
    public function getStatusName()
    {
        return $this->container['status_name'];
    }

    /**
     * Sets status_name
     * @param string $status_name
     * @return $this
     */
    public function setStatusName($status_name)
    {
        $this->container['status_name'] = $status_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


