<?php
/**
 * SupplierOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SupplierOrder Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SupplierOrder implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'supplierOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'contract' => '\Swagger\Client\Model\SupplierContract',
        'document_number' => 'string',
        'id' => 'int',
        'storage_warehouse' => '\Swagger\Client\Model\SupplierStorageWarehouse',
        'supply_date' => 'string',
        'supply_warehouse' => '\Swagger\Client\Model\SupplierSupplyWarehouse'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'contract' => 'contract',
        'document_number' => 'document_number',
        'id' => 'id',
        'storage_warehouse' => 'storage_warehouse',
        'supply_date' => 'supply_date',
        'supply_warehouse' => 'supply_warehouse'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'contract' => 'setContract',
        'document_number' => 'setDocumentNumber',
        'id' => 'setId',
        'storage_warehouse' => 'setStorageWarehouse',
        'supply_date' => 'setSupplyDate',
        'supply_warehouse' => 'setSupplyWarehouse'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'contract' => 'getContract',
        'document_number' => 'getDocumentNumber',
        'id' => 'getId',
        'storage_warehouse' => 'getStorageWarehouse',
        'supply_date' => 'getSupplyDate',
        'supply_warehouse' => 'getSupplyWarehouse'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['storage_warehouse'] = isset($data['storage_warehouse']) ? $data['storage_warehouse'] : null;
        $this->container['supply_date'] = isset($data['supply_date']) ? $data['supply_date'] : null;
        $this->container['supply_warehouse'] = isset($data['supply_warehouse']) ? $data['supply_warehouse'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets contract
     * @return \Swagger\Client\Model\SupplierContract
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     * @param \Swagger\Client\Model\SupplierContract $contract
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets document_number
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     * @param string $document_number
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets storage_warehouse
     * @return \Swagger\Client\Model\SupplierStorageWarehouse
     */
    public function getStorageWarehouse()
    {
        return $this->container['storage_warehouse'];
    }

    /**
     * Sets storage_warehouse
     * @param \Swagger\Client\Model\SupplierStorageWarehouse $storage_warehouse
     * @return $this
     */
    public function setStorageWarehouse($storage_warehouse)
    {
        $this->container['storage_warehouse'] = $storage_warehouse;

        return $this;
    }

    /**
     * Gets supply_date
     * @return string
     */
    public function getSupplyDate()
    {
        return $this->container['supply_date'];
    }

    /**
     * Sets supply_date
     * @param string $supply_date
     * @return $this
     */
    public function setSupplyDate($supply_date)
    {
        $this->container['supply_date'] = $supply_date;

        return $this;
    }

    /**
     * Gets supply_warehouse
     * @return \Swagger\Client\Model\SupplierSupplyWarehouse
     */
    public function getSupplyWarehouse()
    {
        return $this->container['supply_warehouse'];
    }

    /**
     * Sets supply_warehouse
     * @param \Swagger\Client\Model\SupplierSupplyWarehouse $supply_warehouse
     * @return $this
     */
    public function setSupplyWarehouse($supply_warehouse)
    {
        $this->container['supply_warehouse'] = $supply_warehouse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


