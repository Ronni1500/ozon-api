<?php
/**
 * Productv2ImportProductsRequestItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Productv2ImportProductsRequestItem Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Productv2ImportProductsRequestItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'productv2ImportProductsRequestItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'attributes' => '\Swagger\Client\Model\Productv2ImportProductsRequestAttribute[]',
        'barcode' => 'string',
        'category_id' => 'int',
        'complex_attributes' => '\Swagger\Client\Model\Productv2ImportProductsRequestComplexAttribute[]',
        'depth' => 'int',
        'dimension_unit' => 'string',
        'height' => 'int',
        'image_group_id' => 'string',
        'images' => 'string[]',
        'images360' => 'string[]',
        'name' => 'string',
        'offer_id' => 'string',
        'old_price' => 'string',
        'pdf_list' => '\Swagger\Client\Model\ImportProductsRequestPdfList[]',
        'premium_price' => 'string',
        'price' => 'string',
        'vat' => 'string',
        'weight' => 'int',
        'weight_unit' => 'string',
        'width' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'attributes' => 'attributes',
        'barcode' => 'barcode',
        'category_id' => 'category_id',
        'complex_attributes' => 'complex_attributes',
        'depth' => 'depth',
        'dimension_unit' => 'dimension_unit',
        'height' => 'height',
        'image_group_id' => 'image_group_id',
        'images' => 'images',
        'images360' => 'images360',
        'name' => 'name',
        'offer_id' => 'offer_id',
        'old_price' => 'old_price',
        'pdf_list' => 'pdf_list',
        'premium_price' => 'premium_price',
        'price' => 'price',
        'vat' => 'vat',
        'weight' => 'weight',
        'weight_unit' => 'weight_unit',
        'width' => 'width'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'attributes' => 'setAttributes',
        'barcode' => 'setBarcode',
        'category_id' => 'setCategoryId',
        'complex_attributes' => 'setComplexAttributes',
        'depth' => 'setDepth',
        'dimension_unit' => 'setDimensionUnit',
        'height' => 'setHeight',
        'image_group_id' => 'setImageGroupId',
        'images' => 'setImages',
        'images360' => 'setImages360',
        'name' => 'setName',
        'offer_id' => 'setOfferId',
        'old_price' => 'setOldPrice',
        'pdf_list' => 'setPdfList',
        'premium_price' => 'setPremiumPrice',
        'price' => 'setPrice',
        'vat' => 'setVat',
        'weight' => 'setWeight',
        'weight_unit' => 'setWeightUnit',
        'width' => 'setWidth'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'attributes' => 'getAttributes',
        'barcode' => 'getBarcode',
        'category_id' => 'getCategoryId',
        'complex_attributes' => 'getComplexAttributes',
        'depth' => 'getDepth',
        'dimension_unit' => 'getDimensionUnit',
        'height' => 'getHeight',
        'image_group_id' => 'getImageGroupId',
        'images' => 'getImages',
        'images360' => 'getImages360',
        'name' => 'getName',
        'offer_id' => 'getOfferId',
        'old_price' => 'getOldPrice',
        'pdf_list' => 'getPdfList',
        'premium_price' => 'getPremiumPrice',
        'price' => 'getPrice',
        'vat' => 'getVat',
        'weight' => 'getWeight',
        'weight_unit' => 'getWeightUnit',
        'width' => 'getWidth'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['complex_attributes'] = isset($data['complex_attributes']) ? $data['complex_attributes'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['dimension_unit'] = isset($data['dimension_unit']) ? $data['dimension_unit'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['image_group_id'] = isset($data['image_group_id']) ? $data['image_group_id'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['images360'] = isset($data['images360']) ? $data['images360'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['old_price'] = isset($data['old_price']) ? $data['old_price'] : null;
        $this->container['pdf_list'] = isset($data['pdf_list']) ? $data['pdf_list'] : null;
        $this->container['premium_price'] = isset($data['premium_price']) ? $data['premium_price'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['weight_unit'] = isset($data['weight_unit']) ? $data['weight_unit'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets attributes
     * @return \Swagger\Client\Model\Productv2ImportProductsRequestAttribute[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param \Swagger\Client\Model\Productv2ImportProductsRequestAttribute[] $attributes
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets barcode
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     * @param string $barcode
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets category_id
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     * @param int $category_id
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets complex_attributes
     * @return \Swagger\Client\Model\Productv2ImportProductsRequestComplexAttribute[]
     */
    public function getComplexAttributes()
    {
        return $this->container['complex_attributes'];
    }

    /**
     * Sets complex_attributes
     * @param \Swagger\Client\Model\Productv2ImportProductsRequestComplexAttribute[] $complex_attributes
     * @return $this
     */
    public function setComplexAttributes($complex_attributes)
    {
        $this->container['complex_attributes'] = $complex_attributes;

        return $this;
    }

    /**
     * Gets depth
     * @return int
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     * @param int $depth
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets dimension_unit
     * @return string
     */
    public function getDimensionUnit()
    {
        return $this->container['dimension_unit'];
    }

    /**
     * Sets dimension_unit
     * @param string $dimension_unit
     * @return $this
     */
    public function setDimensionUnit($dimension_unit)
    {
        $this->container['dimension_unit'] = $dimension_unit;

        return $this;
    }

    /**
     * Gets height
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param int $height
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets image_group_id
     * @return string
     */
    public function getImageGroupId()
    {
        return $this->container['image_group_id'];
    }

    /**
     * Sets image_group_id
     * @param string $image_group_id
     * @return $this
     */
    public function setImageGroupId($image_group_id)
    {
        $this->container['image_group_id'] = $image_group_id;

        return $this;
    }

    /**
     * Gets images
     * @return string[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     * @param string[] $images
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets images360
     * @return string[]
     */
    public function getImages360()
    {
        return $this->container['images360'];
    }

    /**
     * Sets images360
     * @param string[] $images360
     * @return $this
     */
    public function setImages360($images360)
    {
        $this->container['images360'] = $images360;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets offer_id
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     * @param string $offer_id
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets old_price
     * @return string
     */
    public function getOldPrice()
    {
        return $this->container['old_price'];
    }

    /**
     * Sets old_price
     * @param string $old_price
     * @return $this
     */
    public function setOldPrice($old_price)
    {
        $this->container['old_price'] = $old_price;

        return $this;
    }

    /**
     * Gets pdf_list
     * @return \Swagger\Client\Model\ImportProductsRequestPdfList[]
     */
    public function getPdfList()
    {
        return $this->container['pdf_list'];
    }

    /**
     * Sets pdf_list
     * @param \Swagger\Client\Model\ImportProductsRequestPdfList[] $pdf_list
     * @return $this
     */
    public function setPdfList($pdf_list)
    {
        $this->container['pdf_list'] = $pdf_list;

        return $this;
    }

    /**
     * Gets premium_price
     * @return string
     */
    public function getPremiumPrice()
    {
        return $this->container['premium_price'];
    }

    /**
     * Sets premium_price
     * @param string $premium_price
     * @return $this
     */
    public function setPremiumPrice($premium_price)
    {
        $this->container['premium_price'] = $premium_price;

        return $this;
    }

    /**
     * Gets price
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param string $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets vat
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     * @param string $vat
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets weight
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     * @param int $weight
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets weight_unit
     * @return string
     */
    public function getWeightUnit()
    {
        return $this->container['weight_unit'];
    }

    /**
     * Sets weight_unit
     * @param string $weight_unit
     * @return $this
     */
    public function setWeightUnit($weight_unit)
    {
        $this->container['weight_unit'] = $weight_unit;

        return $this;
    }

    /**
     * Gets width
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param int $width
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


