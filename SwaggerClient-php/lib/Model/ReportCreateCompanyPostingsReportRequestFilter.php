<?php
/**
 * ReportCreateCompanyPostingsReportRequestFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ReportCreateCompanyPostingsReportRequestFilter Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReportCreateCompanyPostingsReportRequestFilter implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'reportCreateCompanyPostingsReportRequestFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'cancel_reason_id' => 'int[]',
        'delivery_schema' => 'string[]',
        'offer_id' => 'string',
        'processed_at_from' => '\DateTime',
        'processed_at_to' => '\DateTime',
        'sku' => 'int[]',
        'status_alias' => 'string[]',
        'statuses' => 'int[]',
        'title' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'cancel_reason_id' => 'cancel_reason_id',
        'delivery_schema' => 'delivery_schema',
        'offer_id' => 'offer_id',
        'processed_at_from' => 'processed_at_from',
        'processed_at_to' => 'processed_at_to',
        'sku' => 'sku',
        'status_alias' => 'status_alias',
        'statuses' => 'statuses',
        'title' => 'title'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'cancel_reason_id' => 'setCancelReasonId',
        'delivery_schema' => 'setDeliverySchema',
        'offer_id' => 'setOfferId',
        'processed_at_from' => 'setProcessedAtFrom',
        'processed_at_to' => 'setProcessedAtTo',
        'sku' => 'setSku',
        'status_alias' => 'setStatusAlias',
        'statuses' => 'setStatuses',
        'title' => 'setTitle'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'cancel_reason_id' => 'getCancelReasonId',
        'delivery_schema' => 'getDeliverySchema',
        'offer_id' => 'getOfferId',
        'processed_at_from' => 'getProcessedAtFrom',
        'processed_at_to' => 'getProcessedAtTo',
        'sku' => 'getSku',
        'status_alias' => 'getStatusAlias',
        'statuses' => 'getStatuses',
        'title' => 'getTitle'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cancel_reason_id'] = isset($data['cancel_reason_id']) ? $data['cancel_reason_id'] : null;
        $this->container['delivery_schema'] = isset($data['delivery_schema']) ? $data['delivery_schema'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['processed_at_from'] = isset($data['processed_at_from']) ? $data['processed_at_from'] : null;
        $this->container['processed_at_to'] = isset($data['processed_at_to']) ? $data['processed_at_to'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['status_alias'] = isset($data['status_alias']) ? $data['status_alias'] : null;
        $this->container['statuses'] = isset($data['statuses']) ? $data['statuses'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets cancel_reason_id
     * @return int[]
     */
    public function getCancelReasonId()
    {
        return $this->container['cancel_reason_id'];
    }

    /**
     * Sets cancel_reason_id
     * @param int[] $cancel_reason_id
     * @return $this
     */
    public function setCancelReasonId($cancel_reason_id)
    {
        $this->container['cancel_reason_id'] = $cancel_reason_id;

        return $this;
    }

    /**
     * Gets delivery_schema
     * @return string[]
     */
    public function getDeliverySchema()
    {
        return $this->container['delivery_schema'];
    }

    /**
     * Sets delivery_schema
     * @param string[] $delivery_schema
     * @return $this
     */
    public function setDeliverySchema($delivery_schema)
    {
        $this->container['delivery_schema'] = $delivery_schema;

        return $this;
    }

    /**
     * Gets offer_id
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     * @param string $offer_id
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets processed_at_from
     * @return \DateTime
     */
    public function getProcessedAtFrom()
    {
        return $this->container['processed_at_from'];
    }

    /**
     * Sets processed_at_from
     * @param \DateTime $processed_at_from
     * @return $this
     */
    public function setProcessedAtFrom($processed_at_from)
    {
        $this->container['processed_at_from'] = $processed_at_from;

        return $this;
    }

    /**
     * Gets processed_at_to
     * @return \DateTime
     */
    public function getProcessedAtTo()
    {
        return $this->container['processed_at_to'];
    }

    /**
     * Sets processed_at_to
     * @param \DateTime $processed_at_to
     * @return $this
     */
    public function setProcessedAtTo($processed_at_to)
    {
        $this->container['processed_at_to'] = $processed_at_to;

        return $this;
    }

    /**
     * Gets sku
     * @return int[]
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param int[] $sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets status_alias
     * @return string[]
     */
    public function getStatusAlias()
    {
        return $this->container['status_alias'];
    }

    /**
     * Sets status_alias
     * @param string[] $status_alias
     * @return $this
     */
    public function setStatusAlias($status_alias)
    {
        $this->container['status_alias'] = $status_alias;

        return $this;
    }

    /**
     * Gets statuses
     * @return int[]
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     * @param int[] $statuses
     * @return $this
     */
    public function setStatuses($statuses)
    {
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


