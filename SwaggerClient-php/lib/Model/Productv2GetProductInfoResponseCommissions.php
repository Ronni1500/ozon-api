<?php
/**
 * Productv2GetProductInfoResponseCommissions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Productv2GetProductInfoResponseCommissions Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Productv2GetProductInfoResponseCommissions implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'productv2GetProductInfoResponseCommissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'delivery_amount' => 'double',
        'min_value' => 'double',
        'percent' => 'double',
        'return_amount' => 'double',
        'sale_schema' => 'string',
        'value' => 'double'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'delivery_amount' => 'deliveryAmount',
        'min_value' => 'minValue',
        'percent' => 'percent',
        'return_amount' => 'returnAmount',
        'sale_schema' => 'saleSchema',
        'value' => 'value'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'delivery_amount' => 'setDeliveryAmount',
        'min_value' => 'setMinValue',
        'percent' => 'setPercent',
        'return_amount' => 'setReturnAmount',
        'sale_schema' => 'setSaleSchema',
        'value' => 'setValue'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'delivery_amount' => 'getDeliveryAmount',
        'min_value' => 'getMinValue',
        'percent' => 'getPercent',
        'return_amount' => 'getReturnAmount',
        'sale_schema' => 'getSaleSchema',
        'value' => 'getValue'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delivery_amount'] = isset($data['delivery_amount']) ? $data['delivery_amount'] : null;
        $this->container['min_value'] = isset($data['min_value']) ? $data['min_value'] : null;
        $this->container['percent'] = isset($data['percent']) ? $data['percent'] : null;
        $this->container['return_amount'] = isset($data['return_amount']) ? $data['return_amount'] : null;
        $this->container['sale_schema'] = isset($data['sale_schema']) ? $data['sale_schema'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets delivery_amount
     * @return double
     */
    public function getDeliveryAmount()
    {
        return $this->container['delivery_amount'];
    }

    /**
     * Sets delivery_amount
     * @param double $delivery_amount
     * @return $this
     */
    public function setDeliveryAmount($delivery_amount)
    {
        $this->container['delivery_amount'] = $delivery_amount;

        return $this;
    }

    /**
     * Gets min_value
     * @return double
     */
    public function getMinValue()
    {
        return $this->container['min_value'];
    }

    /**
     * Sets min_value
     * @param double $min_value
     * @return $this
     */
    public function setMinValue($min_value)
    {
        $this->container['min_value'] = $min_value;

        return $this;
    }

    /**
     * Gets percent
     * @return double
     */
    public function getPercent()
    {
        return $this->container['percent'];
    }

    /**
     * Sets percent
     * @param double $percent
     * @return $this
     */
    public function setPercent($percent)
    {
        $this->container['percent'] = $percent;

        return $this;
    }

    /**
     * Gets return_amount
     * @return double
     */
    public function getReturnAmount()
    {
        return $this->container['return_amount'];
    }

    /**
     * Sets return_amount
     * @param double $return_amount
     * @return $this
     */
    public function setReturnAmount($return_amount)
    {
        $this->container['return_amount'] = $return_amount;

        return $this;
    }

    /**
     * Gets sale_schema
     * @return string
     */
    public function getSaleSchema()
    {
        return $this->container['sale_schema'];
    }

    /**
     * Sets sale_schema
     * @param string $sale_schema
     * @return $this
     */
    public function setSaleSchema($sale_schema)
    {
        $this->container['sale_schema'] = $sale_schema;

        return $this;
    }

    /**
     * Gets value
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param double $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


