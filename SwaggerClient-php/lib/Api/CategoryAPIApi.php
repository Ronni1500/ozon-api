<?php
/**
 * CategoryAPIApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apiv1/warehouse.proto
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: release-sapi-516
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CategoryAPIApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CategoryAPIApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api-seller.ozon.ru');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CategoryAPIApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation categoryAPICategoryAttribute
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\Categoryv2CategoryAttributeRequest $body  (required)
     * @return \Swagger\Client\Model\Categoryv2CategoryAttributeResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPICategoryAttribute($client_id, $api_key, $body)
    {
        list($response) = $this->categoryAPICategoryAttributeWithHttpInfo($client_id, $api_key, $body);
        return $response;
    }

    /**
     * Operation categoryAPICategoryAttributeWithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\Categoryv2CategoryAttributeRequest $body  (required)
     * @return Array of \Swagger\Client\Model\Categoryv2CategoryAttributeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPICategoryAttributeWithHttpInfo($client_id, $api_key, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPICategoryAttribute');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPICategoryAttribute');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling categoryAPICategoryAttribute');
        }
        // parse inputs
        $resourcePath = "/v2/category/attribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Categoryv2CategoryAttributeResponse',
                '/v2/category/attribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Categoryv2CategoryAttributeResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Categoryv2CategoryAttributeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoryAPIDictionaryValueBatch
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\Categoryv2DictionaryValueBatchRequest $body  (required)
     * @return \Swagger\Client\Model\Categoryv2DictionaryValueBatchResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIDictionaryValueBatch($client_id, $api_key, $body)
    {
        list($response) = $this->categoryAPIDictionaryValueBatchWithHttpInfo($client_id, $api_key, $body);
        return $response;
    }

    /**
     * Operation categoryAPIDictionaryValueBatchWithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\Categoryv2DictionaryValueBatchRequest $body  (required)
     * @return Array of \Swagger\Client\Model\Categoryv2DictionaryValueBatchResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIDictionaryValueBatchWithHttpInfo($client_id, $api_key, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPIDictionaryValueBatch');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPIDictionaryValueBatch');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling categoryAPIDictionaryValueBatch');
        }
        // parse inputs
        $resourcePath = "/v2/category/attribute/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Categoryv2DictionaryValueBatchResponse',
                '/v2/category/attribute/values'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Categoryv2DictionaryValueBatchResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Categoryv2DictionaryValueBatchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoryAPIDictionaryValuesByAttributeIDAndRsIDList
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\Categoryv2DictionaryValuesByAttributeIDAndRsIDListRequest $body  (required)
     * @return \Swagger\Client\Model\Categoryv2DictionaryValuesByAttributeIDAndRsIDListResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIDictionaryValuesByAttributeIDAndRsIDList($client_id, $api_key, $body)
    {
        list($response) = $this->categoryAPIDictionaryValuesByAttributeIDAndRsIDListWithHttpInfo($client_id, $api_key, $body);
        return $response;
    }

    /**
     * Operation categoryAPIDictionaryValuesByAttributeIDAndRsIDListWithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\Categoryv2DictionaryValuesByAttributeIDAndRsIDListRequest $body  (required)
     * @return Array of \Swagger\Client\Model\Categoryv2DictionaryValuesByAttributeIDAndRsIDListResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIDictionaryValuesByAttributeIDAndRsIDListWithHttpInfo($client_id, $api_key, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPIDictionaryValuesByAttributeIDAndRsIDList');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPIDictionaryValuesByAttributeIDAndRsIDList');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling categoryAPIDictionaryValuesByAttributeIDAndRsIDList');
        }
        // parse inputs
        $resourcePath = "/v2/category/attribute/value/by-option";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Categoryv2DictionaryValuesByAttributeIDAndRsIDListResponse',
                '/v2/category/attribute/value/by-option'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Categoryv2DictionaryValuesByAttributeIDAndRsIDListResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Categoryv2DictionaryValuesByAttributeIDAndRsIDListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoryAPIGetCategoryAttributes
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\CategoryGetCategoryAttributesRequest $body  (required)
     * @return \Swagger\Client\Model\CategoryGetCategoryAttributesResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryAttributes($client_id, $api_key, $body)
    {
        list($response) = $this->categoryAPIGetCategoryAttributesWithHttpInfo($client_id, $api_key, $body);
        return $response;
    }

    /**
     * Operation categoryAPIGetCategoryAttributesWithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\CategoryGetCategoryAttributesRequest $body  (required)
     * @return Array of \Swagger\Client\Model\CategoryGetCategoryAttributesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryAttributesWithHttpInfo($client_id, $api_key, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPIGetCategoryAttributes');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPIGetCategoryAttributes');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling categoryAPIGetCategoryAttributes');
        }
        // parse inputs
        $resourcePath = "/v1/category/attribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CategoryGetCategoryAttributesResponse',
                '/v1/category/attribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CategoryGetCategoryAttributesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CategoryGetCategoryAttributesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoryAPIGetCategoryAttributes2
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param string $category_id  (required)
     * @param string $attribute_type  (optional, default to ALL)
     * @param string $language  (optional, default to DEFAULT)
     * @return \Swagger\Client\Model\CategoryGetCategoryAttributesResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryAttributes2($client_id, $api_key, $category_id, $attribute_type = null, $language = null)
    {
        list($response) = $this->categoryAPIGetCategoryAttributes2WithHttpInfo($client_id, $api_key, $category_id, $attribute_type, $language);
        return $response;
    }

    /**
     * Operation categoryAPIGetCategoryAttributes2WithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param string $category_id  (required)
     * @param string $attribute_type  (optional, default to ALL)
     * @param string $language  (optional, default to DEFAULT)
     * @return Array of \Swagger\Client\Model\CategoryGetCategoryAttributesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryAttributes2WithHttpInfo($client_id, $api_key, $category_id, $attribute_type = null, $language = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPIGetCategoryAttributes2');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPIGetCategoryAttributes2');
        }
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling categoryAPIGetCategoryAttributes2');
        }
        // parse inputs
        $resourcePath = "/v1/categories/{category_id}/attributes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($attribute_type !== null) {
            $queryParams['attribute_type'] = $this->apiClient->getSerializer()->toQueryValue($attribute_type);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CategoryGetCategoryAttributesResponse',
                '/v1/categories/{category_id}/attributes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CategoryGetCategoryAttributesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CategoryGetCategoryAttributesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoryAPIGetCategoryAttributesV3
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\Categoryv3CategoryAttributesRequest $body  (required)
     * @return \Swagger\Client\Model\Categoryv3CategoryAttributesResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryAttributesV3($client_id, $api_key, $body)
    {
        list($response) = $this->categoryAPIGetCategoryAttributesV3WithHttpInfo($client_id, $api_key, $body);
        return $response;
    }

    /**
     * Operation categoryAPIGetCategoryAttributesV3WithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\Categoryv3CategoryAttributesRequest $body  (required)
     * @return Array of \Swagger\Client\Model\Categoryv3CategoryAttributesResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryAttributesV3WithHttpInfo($client_id, $api_key, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPIGetCategoryAttributesV3');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPIGetCategoryAttributesV3');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling categoryAPIGetCategoryAttributesV3');
        }
        // parse inputs
        $resourcePath = "/v3/category/attribute";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Categoryv3CategoryAttributesResponse',
                '/v3/category/attribute'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Categoryv3CategoryAttributesResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Categoryv3CategoryAttributesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoryAPIGetCategoryTree
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\CategoryGetCategoryTreeRequest $body  (required)
     * @return \Swagger\Client\Model\CategoryGetCategoryTreeResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryTree($client_id, $api_key, $body)
    {
        list($response) = $this->categoryAPIGetCategoryTreeWithHttpInfo($client_id, $api_key, $body);
        return $response;
    }

    /**
     * Operation categoryAPIGetCategoryTreeWithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param \Swagger\Client\Model\CategoryGetCategoryTreeRequest $body  (required)
     * @return Array of \Swagger\Client\Model\CategoryGetCategoryTreeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryTreeWithHttpInfo($client_id, $api_key, $body)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPIGetCategoryTree');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPIGetCategoryTree');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling categoryAPIGetCategoryTree');
        }
        // parse inputs
        $resourcePath = "/v1/category/tree";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CategoryGetCategoryTreeResponse',
                '/v1/category/tree'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CategoryGetCategoryTreeResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CategoryGetCategoryTreeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoryAPIGetCategoryTree2
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param string $category_id  (required)
     * @param string $language  (optional, default to DEFAULT)
     * @return \Swagger\Client\Model\CategoryGetCategoryTreeResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryTree2($client_id, $api_key, $category_id, $language = null)
    {
        list($response) = $this->categoryAPIGetCategoryTree2WithHttpInfo($client_id, $api_key, $category_id, $language);
        return $response;
    }

    /**
     * Operation categoryAPIGetCategoryTree2WithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param string $category_id  (required)
     * @param string $language  (optional, default to DEFAULT)
     * @return Array of \Swagger\Client\Model\CategoryGetCategoryTreeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryTree2WithHttpInfo($client_id, $api_key, $category_id, $language = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPIGetCategoryTree2');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPIGetCategoryTree2');
        }
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling categoryAPIGetCategoryTree2');
        }
        // parse inputs
        $resourcePath = "/v1/categories/tree/{category_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CategoryGetCategoryTreeResponse',
                '/v1/categories/tree/{category_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CategoryGetCategoryTreeResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CategoryGetCategoryTreeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation categoryAPIGetCategoryTree3
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param string $category_id  (optional)
     * @param string $language  (optional, default to DEFAULT)
     * @return \Swagger\Client\Model\CategoryGetCategoryTreeResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryTree3($client_id, $api_key, $category_id = null, $language = null)
    {
        list($response) = $this->categoryAPIGetCategoryTree3WithHttpInfo($client_id, $api_key, $category_id, $language);
        return $response;
    }

    /**
     * Operation categoryAPIGetCategoryTree3WithHttpInfo
     *
     * 
     *
     * @param int $client_id Client id (required)
     * @param string $api_key Api key (required)
     * @param string $category_id  (optional)
     * @param string $language  (optional, default to DEFAULT)
     * @return Array of \Swagger\Client\Model\CategoryGetCategoryTreeResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function categoryAPIGetCategoryTree3WithHttpInfo($client_id, $api_key, $category_id = null, $language = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_id when calling categoryAPIGetCategoryTree3');
        }
        // verify the required parameter 'api_key' is set
        if ($api_key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_key when calling categoryAPIGetCategoryTree3');
        }
        // parse inputs
        $resourcePath = "/v1/categories/tree";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($category_id !== null) {
            $queryParams['category_id'] = $this->apiClient->getSerializer()->toQueryValue($category_id);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // header params
        if ($client_id !== null) {
            $headerParams['Client-Id'] = $this->apiClient->getSerializer()->toHeaderValue($client_id);
        }
        // header params
        if ($api_key !== null) {
            $headerParams['Api-Key'] = $this->apiClient->getSerializer()->toHeaderValue($api_key);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CategoryGetCategoryTreeResponse',
                '/v1/categories/tree'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CategoryGetCategoryTreeResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CategoryGetCategoryTreeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
